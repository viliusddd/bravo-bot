import 'dotenv/config'
import {createFor} from '@tests/utils/records'
import createTestDatabase from '@tests/utils/createTestDatabase'
import supertest from 'supertest'
import {apiMessageMatcher, fakeMessage, messageMatcher} from './utils'
import {fakeEmoji} from '@/modules/emojis/tests/utils'
import {fakePraise} from '@/modules/praises/tests/utils'
import {fakeSprint} from '@/modules/sprints/tests/utils'
import {fakeTemplate} from '@/modules/templates/tests/utils'
import {fakeUser} from '@/modules/users/tests/utils'
import BotClient from '@/services/discord'
import createApp from '@/app'

const bot = new BotClient(
  process.env.DISCORD_CHANNEL_ID,
  process.env.DISCORD_GUILD_ID,
  process.env.DISCORD_TOKEN
)
const db = await createTestDatabase()
const app = createApp(db, bot)

// builds helper function to create messages
const createEmojis = createFor(db, 'emoji')
const createMessages = createFor(db, 'message')
const createPraises = createFor(db, 'praise')
const createSprints = createFor(db, 'sprint')
const createTemplates = createFor(db, 'template')
const createUsers = createFor(db, 'user')

afterEach(async () => {
  // clearing the tested table after each test
  await db.deleteFrom('message').execute()
  await db.deleteFrom('sprint').execute()
  await db.deleteFrom('user').execute()
})

// close the database connection after all tests
// For SQLite, this is not necessary, but for other databases, it is.
afterAll(() => db.destroy())

// This is not called "contoller.spec.ts" because we are specifying what this
// entire module should do, not just the controller.

// This could be moved to root-level tests folder, however, nearly always
// breaking tests here means issues in the messages module, so we are colocating
// it with the module.
describe('GET', () => {
  it('should return an empty array when there are no messages', async () => {
    // ACT (When we request...)
    const {body} = await supertest(app).get('/messages').expect(200)

    // ASSERT (Then we should get...)
    expect(body).toEqual([])
  })

  it('should return a list of existing messages', async () => {
    // ARRANGE (Given that we have...)
    const users = await createUsers(fakeUser())
    const sprints = await createSprints(fakeSprint())
    const bodyOverride = {userId: users[0].id, sprintId: sprints[0].id}
    // const body = {userId: user!.id, sprintId: sprint!.id}
    await createMessages([
      // we have a function that spits out a generic fake message
      fakeMessage(bodyOverride),

      // we generate a slightly different message
      // in this function call we provide what should
      // be different from the our default generic message
      fakeMessage({...bodyOverride, messageStr: 'You did really well !!'})
    ])

    // ACT (When we request...)
    const {body} = await supertest(app).get('/messages').expect(200)

    // ASSERT (Then we should get...)
    expect(body).toEqual([
      messageMatcher(),
      messageMatcher({
        messageStr: 'You did really well !!'
      })
    ])

    // This is same as:
    // expect(body).toEqual([
    //   {
    //     id: expect.any(Number), // we do not care about the exact id
    //     title: 'My Title', // our default title, content generated by fakeMessage
    //     content: 'Some Content',
    //   },
    //   {
    //     id: expect.any(Number),
    //     title: 'Title 2', // our custom title
    //     content: 'Other Content',
    //   },
    // ]);
  })
})

describe('GET /:id', () => {
  it('should return 404 if message does not exist', async () => {
    // ACT (When we request...)
    const {body} = await supertest(app).get('/messages/2912').expect(404)

    // ASSERT (Then we should get...)
    // Some error message that contains "not found".
    // Instead of stating the exact error message, we use a
    // regular expression to draw slightly more flexible boundaries
    // around our expectations. If we wanted to slightly change
    // our error message in code, we would not want these tests to break,
    // as long as the error message still contains "not found" in some
    // form: "MessageNotFound", "Not found", "Message was not found"...
    expect(body.error.message).toMatch(/not found/i)
  })

  it('should return an message if it exists', async () => {
    // ARRANGE (Given that we have...)
    const users = await createUsers(fakeUser())
    const sprints = await createSprints(fakeSprint())
    const bodyOverride = {
      id: 1371,
      userId: users[0].id,
      sprintId: sprints[0].id
    }

    await createMessages([fakeMessage(bodyOverride)])

    // ACT (When we request...)
    const {body} = await supertest(app).get('/messages/1371').expect(200)

    // ASSERT (Then we should get...)
    expect(body).toEqual(messageMatcher(bodyOverride))
  })
})

describe('POST', () => {
  it('should return 400 if username is missing', async () => {
    // ACT (When we request...)
    const sprints = await createSprints(fakeSprint())

    const {body} = await supertest(app)
      .post('/messages')
      .send({sprintCode: sprints[0].sprintCode})
      .expect(400)

    // ASSERT (Then we should get...)
    expect(body.error.message).toMatch(/message/i)
  })

  it('should return 400 if sprintCode is missing', async () => {
    // ACT (When we request...)
    const users = await createUsers(fakeUser())

    const {body} = await supertest(app)
      .post('/messages')
      .send({username: users[0].username})
      .expect(400)

    // ASSERT (Then we should get...)
    expect(body.error.message).toMatch(/message/i)
  })

  it('does not allow to create a message with empty username', async () => {
    const sprints = await createSprints(fakeSprint())
    const {body} = await supertest(app)
      .post('/messages')
      .send({
        username: '',
        sprintCode: sprints[0].sprintCode
      })
      .expect(400)

    expect(body.error.message).toMatch(/message/i)
  })

  it('should return 201 and created message record', async () => {
    await createEmojis(fakeEmoji())
    await createTemplates(fakeTemplate())
    await createPraises(fakePraise())
    const users = await createUsers(fakeUser())
    const sprints = await createSprints(fakeSprint())

    const {body} = await supertest(app)
      .post('/messages')
      .send({
        username: users[0].username,
        sprintCode: sprints[0].sprintCode
      })
      .expect(201)

    expect(body).toEqual(apiMessageMatcher())
  })
})

describe('DELETE', () => {
  it('returns 404 if message does not exist', async () => {
    const {body} = await supertest(app).delete('/messages/12345678').expect(404)

    expect(body.error.message).toMatch(/not found/i)
  })

  it('returns 204 on successfull deletion', async () => {
    const users = await createUsers(fakeUser())
    const sprints = await createSprints(fakeSprint())

    await createMessages([
      fakeMessage({id: 123, userId: users[0].id, sprintId: sprints[0].id})
    ])

    await supertest(app).delete('/messages/123').expect(204)
  })

  it('returns no body content on success', async () => {
    const users = await createUsers(fakeUser())
    const sprints = await createSprints(fakeSprint())

    await createMessages([
      fakeMessage({id: 123, userId: users[0].id, sprintId: sprints[0].id})
    ])

    const record = await supertest(app).delete('/messages/123')
    expect(record.body).toEqual({})
  })
})
